{"version":3,"sources":["Components/ReactComponentRefactor/components/Button/MoreButtonWithConditionalRendering.js","Components/ReactComponentRefactor/components/Search/SearchInactive.js","Components/ReactComponentRefactor/components/Search/Search.js","Components/ReactComponentRefactor/components/Search/FixedSearchBar.js","Components/ReactComponentRefactor/components/Button/Button.js","Components/ReactComponentRefactor/components/Button/SortButton.js","Components/ReactComponentRefactor/components/Table/Table.js","Components/ReactComponentRefactor/components/ReactComponentRefactor/ReactComponentRefactor.js","App.js","serviceWorker.js","index.js"],"names":["conditionalRenderingFn","SearchInactive","Component","_this$props","this","props","children","onChange","onSubmit","totalHits","react_default","a","createElement","className","placeholder","type","FixedSearchBar","_ref","value","_useState","useState","_useState2","Object","slicedToArray","isClicking","setIsClicking","inputStyle","fixedBtnStyle","push","join","onFocus","onBlur","Button","onClick","_this$props$className","Sort","onSort","sortKey","activeSortKey","sortStyleClass","components_Button_Button","withEither","EitherComponent","MoreButtonWithConditionalRendering","compose","isLoading","list","listForButtonConditionalRendering","length","withConditionalRendering","SORTS","RELEVANCE","TITLE","sortBy","o","data","title","DATE","Date","date_created","CENTER","center","TableGridItem","item","links","_data$","href","src","alt","TableGrid","sortedList1","sortedList2","sortedList3","sortedList4","targetRef","useRef","width","height","dimensions","setDimensions","sortedList","movement_timer","test_dimensions","current","offsetWidth","offsetHeight","useLayoutEffect","window","addEventListener","clearInterval","setTimeout","filter","itemIndex","ref","map","Table_TableGridItem","key","nasa_id","Table","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","isSortReverse","bind","assertThisInitialized","setState","SortButton","Table_TableGrid","ReactComponentRefactor","resultsNASA","isLoadingNASA","searchText","searchKeyText","isAddingPageNASA","isHover","scroll","isRedirecting","onSearchChange","onSearchSubmit","needsToFetchStories","onDismiss","fetchTopNASAStories","setTopNASAStories","onMouseLeave","onMouseEnter","onScrollFixNav","_this2","page","arguments","undefined","_this$state","axios","concat","then","result","collection","catch","error","console","log","items","metadata","prevState","listSpliceForUpdating","splice","oldList","itemsForRendering","updatedList","toConsumableArray","objectSpread","defineProperty","updateTopNASAStoriesState","event","target","_this3","preventDefault","id","_this$state2","searchKey","results","_results$searchKey","hits","updatedHits","objectID","pageYOffset","_this4","_this$state3","total_hits","loadButtonStyle","searchBarStyle","components_Search_FixedSearchBar","style","paddingTop","components_Search_SearchInactive","components_Table_Table","App","ReactComponentRefactor_ReactComponentRefactor_ReactComponentRefactor","Boolean","location","hostname","match","childProcess","require","oldSpawn","spawn","apply","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.15d8d158.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Button } from '../Button';\r\nimport { compose } from 'recompose';\r\n\r\n\r\n//search in displayed list\r\n// const isSearched = ( searchText ) => item =>\r\n//   { \r\n//     //exclude title = null;\r\n//     if( item.title === null) return false; \r\n//     return item.title.toLowerCase().includes( searchText.toLowerCase() );\r\n//   }\r\n\r\n\r\n//define withEither interface Fn\r\nconst withEither = ( conditionalRenderingFn, EitherComponent ) => ( Component ) => (props) =>\r\n  conditionalRenderingFn(props)\r\n  ? <EitherComponent />\r\n  : <Component { ...props } />\r\n\r\n//define withMaybe interface Fn\r\nconst withMaybe = ( conditionalRenderingFn ) => ( Component ) => ( props ) =>\r\n  conditionalRenderingFn(props)\r\n  ? null\r\n  : <Component {...props } />\r\n\r\n/** Conditional Rendering Fn **/\r\n//Loading Component Condition\r\nconst isLoadingConditionalFn = (props) => props.isLoading;\r\n\r\n//Empty Message Component Condition\r\nconst isEmptyConditionalFn = (props) => !props.listForButtonConditionalRendering.length && props.list.length === props.totalHits;\r\n\r\n//null\r\nconst nullConditionFn = (props) => !props.list;\r\n\r\n/** Conditional Components **/\r\n//Loading Component\r\nconst Loading = () => \r\n  <div>\r\n    <p>Loading...</p>\r\n  </div>\r\n\r\n//Is Empty Component\r\nconst EmptyMessage = () => \r\n  <div>\r\n    <p> No More to show. </p>\r\n  </div>\r\n\r\n \r\n\r\n  const withConditionalRendering = compose(\r\n    withEither(isLoadingConditionalFn, Loading),\r\n    withMaybe(nullConditionFn),\r\n    withEither(isEmptyConditionalFn, EmptyMessage)\r\n  );\r\n\r\n  //const MoreButtonWithNull = withMaybe(nullConditionFn);\r\n  //const MoreButtonWithLoading = withEither(isLoadingConditionalFn, Loading);\r\n  //const MoreButtonWithEmpty = withEither(isEmptyConditionalFn, EmptyMessage);\r\n\r\n  //const MoreButtonWithConditionalRendering = MoreButtonWithEmpty(MoreButtonWithNull(MoreButtonWithLoading( Button )));\r\n  const MoreButtonWithConditionalRendering = withConditionalRendering( Button );\r\n\r\n  \r\n  export { MoreButtonWithConditionalRendering };","import React, { Component } from 'react';\r\n\r\nimport './SearchInactive.css';\r\n\r\nclass SearchInactive extends Component {\r\n  \r\n  render() {\r\n    const {\r\n    \tchildren,\r\n    \tonChange,\r\n    \t//value,\r\n    \tonSubmit,\r\n      totalHits\r\n    } = this.props;\r\n\r\n\treturn (\r\n    <div className='inactive-input-wrapper'>\r\n      <div className='inactive-header-wrapper'>\r\n        <p className='inactive-header-intro'>Our Conquest is the Sea of Stars </p>\r\n        <form onSubmit={onSubmit}>\r\n          <div className='inactive-input-form-wrapper'>\r\n            <input \r\n              onChange={onChange}\r\n              //value={value}\r\n              className='inactive-input-text'\r\n              placeholder='Key Words'\r\n            />\r\n            <button className='inactive-search-btn' type='submit'> \r\n              {children}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <span className='inactive-input-counter'> showing {totalHits} works</span>\r\n    </div>\r\n\t)\r\n  }\r\n}\r\n\r\nexport default SearchInactive;","import React, { Component } from 'react';\r\n\r\nimport './Search.css';\r\n\r\nclass Search extends Component {\r\n  \r\n  render() {\r\n    const {\r\n    \tchildren,\r\n    \tonChange,\r\n    \tonSubmit,\r\n    \t//value\r\n      totalHits\r\n    } = this.props;\r\n\r\n\treturn (\r\n    <div className='input-wrapper'>\r\n      <div className='header-wrapper'>\r\n        <p className='header-intro'>NASA <u>IMAGES </u> Search Engine </p>\r\n        <p className='header-intro-mobile'> Search </p>\r\n        <form onSubmit={onSubmit}>\r\n          <div className='input-form-wrapper'>\r\n            <input \r\n              onChange={onChange}\r\n              //value={value}\r\n              className='input-text'\r\n              placeholder='Key Words'\r\n            />\r\n            <button className='search-btn' type='submit'> \r\n              {children}\r\n            </button>\r\n          </div>\r\n        </form>\r\n      </div>\r\n      <span className='input-counter'> showing {totalHits} works</span>\r\n    </div>\r\n\t)\r\n  }\r\n}\r\n\r\nexport default Search;","import React, { useState } from 'react';\r\n\r\nimport './FixedSearchBar.css';\r\n\r\nconst FixedSearchBar = ({onSubmit, onChange, value, totalHits,children}) => {\r\n  \r\n  const [isClicking, setIsClicking] = useState(false);\r\n  \r\n  const inputStyle = ['fixed-input-text'];\r\n  const fixedBtnStyle =['fixed-search-btn'];\r\n\r\n  if(isClicking) {\r\n    inputStyle.push('fixed-input-text-focused');\r\n    fixedBtnStyle.push('fixed-search-btn-focused');\r\n  }  \r\n \r\n  return(\r\n    <div className='fixed-search-bar-flex'>\r\n      <form onSubmit={onSubmit}>\r\n        <div className='fixed-search-bar-wrapper'>\r\n          <input \r\n            onChange={onChange}\r\n            value={value}\r\n            className={inputStyle.join(' ')}\r\n            onFocus={() => setIsClicking(true)}\r\n            onBlur={() => setIsClicking(false)}\r\n            placeholder='Key Words'\r\n          />\r\n          <button className={fixedBtnStyle.join(' ')} type='submit'> \r\n            {children}\r\n          </button>\r\n        </div>\r\n     </form>\r\n    </div> \r\n  )\r\n}\r\n\r\nexport default FixedSearchBar;\r\n","import React, { Component } from 'react';\r\nimport './Button.css';\r\n\r\nclass Button extends Component {\r\n  render(){\r\n\tconst {\r\n\t  onClick,\r\n\t  children,\r\n\t  //pass default className, can also pass by defaultprops\r\n\t  //has to be in class component, not const\r\n\t  // \"=\" not \":\"\r\n\t  className = '',\t\r\n\t} = this.props;\r\n  \r\n\r\n   return(\r\n    <button\r\n      onClick={onClick}\r\n      type='button'\r\n      className={className}\r\n    >\r\n      {children}\r\n    </button>\r\n  \t)\r\n  }\r\n}\r\n\r\n\r\nexport default Button;\r\n","import React from 'react';\r\nimport { Button } from '../Button';\r\n\r\nconst Sort = ({\r\n\tonSort,\r\n\tsortKey,\r\n\tactiveSortKey, \r\n\tchildren\r\n}) => {\r\n  const sortStyleClass = ['button-primary','button-inline'];\r\n  \r\n  //add active style when sortKey = activeKey;\r\n  if( sortKey === activeSortKey ) {\r\n  \tsortStyleClass.push('button-active')\r\n  }\r\n   \r\n  return(\r\n    <Button\r\n      onClick={() => onSort(sortKey)}\r\n      sortKey={sortKey}\r\n      className={sortStyleClass.join(' ')}\r\n    >\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\nexport default Sort; \r\n","import React, { Component, useState, useLayoutEffect, useRef } from 'react';\r\nimport { SortButton } from '../Button';\r\nimport { sortBy } from 'lodash';\r\nimport './Table.css';\r\n\r\n\r\n//a list of Fn used to sort list\r\nconst SORTS = {\r\n  //A default list should be defined, not sorted\r\n  RELEVANCE: list => list,\r\n  TITLE: list => sortBy(list, function(o) {return o.data[0].title}),\r\n  DATE: list => sortBy(list, function(o) {\r\n    return new Date(o.data[0].date_created);\r\n  }),\r\n  CENTER: list => sortBy(list, function(o) {return o.data[0].center}),\r\n  //COMMENTS: list => sortBy(list, 'num_comments').reverse(),\r\n  //POINTS: list => sortBy(list, 'points').reverse(),\t\r\n};\r\n\r\n//search in displayed list\r\n// const isSearched = ( searchTerm ) => item =>\r\n//   { \r\n//     //exclude title = null;\r\n//     if( item.title === null) return false; \r\n//     return item.title.toLowerCase().includes( searchTerm.toLowerCase() );\r\n//   }\r\n\r\nconst TableGridItem = ({item}) => {\r\n  const { data, links } = item;\r\n  const { title, date_created } = data[0];\r\n  const { href } = links[0];\r\n  \r\n  return(\r\n    <div className='table-grid-item'>\r\n      <div className='table-grid-item-pic'>\r\n        <img src={href} alt=\"\"/>\r\n      </div>\r\n      <div className='table-grid-item-content'>\r\n        <h4 className='table-grid-item-title'> {title} </h4>\r\n        <span className='table-grid-item-date'> {date_created} </span>\r\n      </div> \r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nconst TableGrid = (props) => {\r\n  const targetRef = useRef();\r\n  const [dimensions, setDimensions] = useState({ width: 0, height: 0});\r\n  const sortedList = props.sortedList;\r\n\r\n  //hold the time for setTimeout and clearInterval\r\n  let movement_timer = null;\r\n\r\n  const RESET_TIMEOUT = 100;\r\n  \r\n  //get height and width of table container\r\n  const test_dimensions = () => {\r\n    if(targetRef.current) {\r\n      setDimensions({\r\n        width: targetRef.current.offsetWidth,\r\n        height: targetRef.current.offsetHeight\r\n      })\r\n    }\r\n  }\r\n\r\n  useLayoutEffect(() =>{\r\n    test_dimensions();\r\n  }, []);\r\n\r\n  //enable resize event listener\r\n  window.addEventListener(\"resize\", () =>{\r\n    clearInterval(movement_timer);\r\n    movement_timer = setTimeout(test_dimensions, RESET_TIMEOUT);\r\n  });\r\n\r\n\r\n // console.log(dimensions.width);\r\n  \r\n  //define sub sortList for responsive page\r\n  let sortedList1;\r\n  let sortedList2;\r\n  let sortedList3;\r\n  let sortedList4;\r\n  \r\n  //large page\r\n  if(dimensions.width >= 940) {\r\n    sortedList1 = sortedList.filter((item, itemIndex) => { return itemIndex % 4 === 0 });\r\n    sortedList2 = sortedList.filter((item, itemIndex) => { return itemIndex % 4 === 1 });\r\n    sortedList3 = sortedList.filter((item, itemIndex) => { return itemIndex % 4 === 2 });\r\n    sortedList4 = sortedList.filter((item, itemIndex) => { return itemIndex % 4 === 3 });\r\n\r\n    return(\r\n      <div className='table-grid' ref={targetRef}>\r\n        <div className='table-grid-column'>\r\n          {sortedList1.map(item => \r\n            {\r\n              return (\r\n                <TableGridItem\r\n                  item={item}\r\n                  key={item.data[0].nasa_id}\r\n                />\r\n              )\r\n            }   \r\n          )}\r\n        </div>        \r\n        <div className='table-grid-column'>\r\n          {sortedList2.map(item => \r\n            {\r\n              return (\r\n                <TableGridItem\r\n                  item={item}\r\n                  key={item.data[0].nasa_id}\r\n                />\r\n              )\r\n            }   \r\n          )}\r\n        </div>        \r\n        <div className='table-grid-column'>\r\n          {sortedList3.map(item => \r\n            {\r\n              return (\r\n                <TableGridItem\r\n                  item={item}\r\n                  key={item.data[0].nasa_id}\r\n                />\r\n              )\r\n            }   \r\n          )}\r\n        </div>       \r\n        <div className='table-grid-column'>\r\n          {sortedList4.map(item => \r\n            {\r\n              return (\r\n                <TableGridItem\r\n                  item={item}\r\n                  key={item.data[0].nasa_id}\r\n                />\r\n              )\r\n            }   \r\n          )}\r\n        </div>\r\n      </div>\r\n    ); \r\n  }\r\n  \r\n  //mid page\r\n  else if(dimensions.width >= 710 && dimensions.width <= 939) {\r\n    sortedList1 = sortedList.filter((item, itemIndex) => { return itemIndex % 2 === 0 });\r\n    sortedList2 = sortedList.filter((item, itemIndex) => { return itemIndex % 2 === 1 });\r\n\r\n    return(\r\n      <div className='table-grid' ref={targetRef}>\r\n        <div className='table-grid-column'>\r\n          {sortedList1.map(item => \r\n            {\r\n              return (\r\n                <TableGridItem\r\n                  item={item}\r\n                  key={item.data[0].nasa_id}\r\n                />\r\n              )\r\n            }   \r\n          )}\r\n        </div>        \r\n        <div className='table-grid-column'>\r\n          {sortedList2.map(item => \r\n            {\r\n              return (\r\n                <TableGridItem\r\n                  item={item}\r\n                  key={item.data[0].nasa_id}\r\n                />\r\n              )\r\n            }   \r\n          )}\r\n        </div>      \r\n      </div>\r\n    );\r\n  }\r\n  \r\n  //small page\r\n  else if(dimensions.width <= 709) {\r\n    \r\n    return(\r\n      <div ref={targetRef} className='table-grid'>\r\n      {sortedList.map(item => \r\n            {\r\n              return (\r\n                <TableGridItem\r\n                  item={item}\r\n                  key={item.data[0].nasa_id}\r\n                />\r\n              )\r\n            }   \r\n          )\r\n        }\r\n    </div>\r\n    )\r\n  }\r\n  \r\n  // return(\r\n  //   <div ref={targetRef} className='table-grid'>\r\n  //     {sortedList.map(item => \r\n  //           {\r\n  //             const { data, links } = item;\r\n  //             const {nasa_id, title, secondary_creator, center, date_created } = data[0];\r\n  //             const { href } = links[0];\r\n\r\n  //             return (\r\n  //               <div key={nasa_id} className='table-grid-item'>\r\n  //                 <div className='table-grid-item-pic'>\r\n  //                     <img src={href} alt=\"\"/>\r\n  //                 </div>\r\n  //                 <div className='table-grid-item-content'>\r\n  //                   <h4 className='table-grid-item-title'> {title} </h4>\r\n  //                   <span className='table-grid-item-center'> {center} </span>\r\n  //                   <span className='table-grid-item-date'> {date_created} </span>\r\n  //                 </div> \r\n  //               </div> \r\n  //             )\r\n  //           }   \r\n  //         )\r\n  //       }\r\n  //   </div>\r\n  // )\r\n}\r\n\r\n\r\n\r\nclass Table extends Component {\r\n  constructor(props) {\r\n  \tsuper(props);\r\n    this.state = ({\r\n      isSortReverse: false,\r\n      sortKey: 'RELEVANCE',\t\r\n    })\r\n\r\n    this.onSort = this.onSort.bind(this);\r\n  }\r\n  \r\n  onSort(sortKey) {\r\n    \r\n    const isSortReverse = sortKey === this.state.sortKey && \r\n    !this.state.isSortReverse;\r\n\r\n    //pass sortKey to table \r\n    this.setState({ \r\n      sortKey,\r\n      isSortReverse,\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n  \tconst {\r\n  \t  list,\r\n  \t  //onDismiss,\r\n      //searchText\t\r\n  \t} = this.props;\r\n    \r\n    const {\r\n      //isSortReverse,\r\n      sortKey,\t\r\n    } = this.state;\r\n\r\n    //pass list to sort Fn\r\n    const sortedList = SORTS[sortKey](list)\r\n    \r\n    //define if reverse\r\n    // const reverseSortList = isSortReverse\r\n    //   ? sortedList.reverse()\r\n    //   : sortedList;\r\n   // console.log(sortedList.filter(isSearched(searchText)));\r\n\treturn (\r\n\t  <div className=\"table\"> \r\n      <div className='table-btn-wrapper' >\r\n        <SortButton\r\n          onSort={this.onSort}\r\n          sortKey={'RELEVANCE'}\r\n          activeSortKey={sortKey}\r\n        >\r\n          Relevance\r\n        </SortButton>\r\n        <SortButton\r\n          onSort={this.onSort}\r\n          sortKey={'TITLE'}\r\n          activeSortKey={sortKey}\r\n        >\r\n          Title\r\n        </SortButton>\r\n        <SortButton\r\n          onSort={this.onSort}\r\n          sortKey={'DATE'}\r\n          activeSortKey={sortKey}\r\n        >\r\n          Date\r\n        </SortButton>\r\n        <SortButton\r\n          onSort={this.onSort}\r\n          sortKey={'CENTER'}\r\n          activeSortKey={sortKey}\r\n        >\r\n          Center\r\n        </SortButton>  \r\n      </div>\r\n      <TableGrid \r\n        sortedList={sortedList}\r\n      />  \r\n\t  </div>\r\n\t)\r\n  }\r\n}\r\n\r\n\r\n\r\nexport default Table;\r\n","import React, { Component } from 'react';\r\n\r\nimport axios from 'axios';\r\n//import API data;\r\n\r\n\r\nimport { SearchInactive, FixedSearchBar } from '../Search';\r\nimport { Table } from '../Table';\r\nimport { MoreButtonWithConditionalRendering } from '../Button';\r\n\r\nimport './ReactComponentRefactor.css';\r\n  //fixed search bar\r\n \r\n  //update results state for rendering\r\n  const updateTopNASAStoriesState = ( items, metadata, page ) =>\r\n    (prevState) => {\r\n      //access prev searchKey as object key;\r\n      //access prev results for updating;\r\n      const { searchKeyText, resultsNASA } = prevState;\r\n\r\n      //split items list to render;\r\n      const listSpliceForUpdating  = items.splice(0, 20);\r\n      \r\n      //get old hits\r\n      const oldList = resultsNASA && resultsNASA[searchKeyText]\r\n        ? resultsNASA[searchKeyText].itemsForRendering\r\n        : [];\r\n\r\n      //update results hits with new data\r\n      const updatedList = [\r\n        ...oldList,\r\n        ...listSpliceForUpdating,\r\n      ];\r\n\r\n      //updating page when original list is empty\r\n      //do not change result data structure\r\n      //only adjust updates in result state\r\n      if(!items.length) {\r\n        return {\r\n          resultsNASA: {\r\n            ...resultsNASA,\r\n            [searchKeyText]: {\r\n              itemsForRendering: updatedList,\r\n              page: page + 1,\r\n              items, \r\n              metadata, \r\n            }\r\n          },\r\n          isLoadingNASA: false,\r\n          isAddingPageNASA: true,\r\n        }\r\n      }\r\n\r\n      //not updating page, set adding page to false\r\n      if( items.length ) {\r\n        return {\r\n          resultsNASA: {\r\n            ...resultsNASA,\r\n            [searchKeyText]: {\r\n              itemsForRendering: updatedList,\r\n              items, \r\n              metadata,\r\n              page, \r\n            }\r\n          },\r\n          isLoadingNASA: false,\r\n          isAddingPageNASA: false,\r\n        }\r\n      }\r\n      \r\n    }\r\n\r\nclass ReactComponentRefactor extends Component {\r\n  constructor(props) {\r\n  \tsuper(props);\r\n\r\n  \tthis.state = {\r\n      //store fetched data list\r\n      resultsNASA: null,\r\n      //while getting data\r\n      isLoadingNASA: false,\r\n      //default fetch data, fluctuant variable, \r\n      searchText: 'star',\r\n      //temporary store each result\r\n      searchKeyText: '',\r\n      //if adding page number\r\n      isAddingPageNASA: true,\r\n      //hover state inital false\r\n      isHover: false,\r\n      scroll: null,\r\n      //redirect search \r\n      isRedirecting: false,\r\n  \t}\r\n    \r\n    //bind all methods;\r\n    this.onSearchChange = this.onSearchChange.bind(this);\r\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\r\n    this.needsToFetchStories = this.needsToFetchStories.bind(this);\r\n    this.onDismiss = this.onDismiss.bind(this);\r\n\r\n    //bind all methods NASA;\r\n    this.fetchTopNASAStories = this.fetchTopNASAStories.bind(this);\r\n    this.setTopNASAStories = this.setTopNASAStories.bind(this);\r\n    this.onMouseLeave = this.onMouseLeave.bind(this);\r\n    this.onMouseEnter = this.onMouseEnter.bind(this);\r\n    this.onScrollFixNav = this.onScrollFixNav.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    //pass searchText as an argument to fetch API; \r\n    const { searchText } = this.state;\r\n\r\n    //temporary store searchTerm\r\n    this.setState({ \r\n      searchKeyText: searchText,\r\n    });\r\n    \r\n    //pass variable to api\r\n    this.fetchTopNASAStories( searchText ); \r\n\r\n    window.addEventListener('scroll', this.onScrollFixNav);  \r\n    \r\n  }\r\n\r\n  //fetch data with API\r\n  fetchTopNASAStories( searchText, page = 1 ){\r\n    //when fetch data, set loading as true;\r\n    this.setState({\r\n      isLoadingNASA: true,\r\n    });\r\n\r\n\r\n    const { resultsNASA, searchKeyText } = this.state;\r\n    \r\n    //fetch data under condition\r\n    if( this.state.isAddingPageNASA ) {\r\n\r\n      axios(`https://images-api.nasa.gov/search?q=${searchText}&media_type=image&page=${page}`)\r\n        .then(result => this.setTopNASAStories( result.data.collection, page ))\r\n        .catch(error => console.log( error )); \r\n    }\r\n\r\n    if( !this.state.isAddingPageNASA ) {\r\n      this.setTopNASAStories( resultsNASA[searchKeyText], page );\r\n    }\r\n  }\r\n  \r\n  setTopNASAStories(result, page) {\r\n    console.log(result);\r\n    console.log(page);\r\n    const {items, metadata } = result;\r\n    \r\n    console.log(items);\r\n    console.log(metadata);\r\n\r\n    this.setState(updateTopNASAStoriesState(items, metadata, page ));\r\n  }\r\n\r\n  //handle input value \r\n  onSearchChange(event){\r\n    this.setState({\r\n      searchText: event.target.value,\r\n    })\r\n  }\r\n\r\n  //submit input data with button/press enter\r\n  onSearchSubmit(event){\r\n    //set searchKey before fetch data\r\n    const { searchText } = this.state;    \r\n    \r\n    this.setState({ \r\n      searchKeyText: searchText,\r\n      isLoadingNASA: true,\r\n      isRedirecting: true,\r\n    });\r\n\r\n\r\n    if( this.needsToFetchStories(searchText)) {\r\n\r\n      // this.setState({\r\n      //   //start a new fetch process\r\n      //   isAddingPageNASA: true,\r\n      //   //initiate page\r\n      //   page: 1,\r\n      //   resultsNASA: null,\r\n      // });\r\n      const page = 1;\r\n\r\n      axios(`https://images-api.nasa.gov/search?q=${searchText}&media_type=image&page=${page}`)\r\n        .then(result => this.setTopNASAStories( result.data.collection, page ))\r\n        .catch(error => console.log( error ));\r\n    }\r\n    \r\n    //prevent page refresh\r\n    event.preventDefault();\r\n  }\r\n\r\n  //check if specific API already fetched\r\n  needsToFetchStories(searchText) {\r\n    return !this.state.resultsNASA[searchText];\r\n  }\r\n  \r\n  onDismiss(id) {\r\n\r\n    //condition statement;\r\n    //not selected, turn true;\r\n    const isNotDismissId = item => item.objectID !== id;\r\n    \r\n    //pass data;\r\n    const {\r\n      searchKey,\r\n      results,\r\n    } = this.state;\r\n\r\n    const {\r\n      hits,\r\n      page, \r\n    } = results[searchKey];\r\n    \r\n    console.log(id);\r\n\r\n    const updatedHits = hits.filter(isNotDismissId);\r\n    console.log(updatedHits);\r\n\r\n    this.setState({\r\n      results: {\r\n        ...results,\r\n        [searchKey]: {hits: updatedHits, page}\r\n      }\r\n    })\r\n  }\r\n\r\n  //mouse in\r\n  onMouseEnter() {\r\n    this.setState( {isHover: true } )\r\n  }\r\n\r\n  //mouse out\r\n  onMouseLeave() {\r\n    this.setState( { isHover: false } )\r\n  }\r\n  \r\n  onScrollFixNav() {\r\n    this.setState({scroll: window.pageYOffset});\r\n  }\r\n\r\n  render() {\r\n    \r\n    console.log( this.state.resultsNASA );\r\n    //pass all necessary data from state for using\r\n    const { \r\n      searchText,\r\n      resultsNASA,\r\n      searchKeyText,\r\n      isLoadingNASA,\r\n      //isAddingPageNASA,\r\n      isHover,\r\n      isRedirecting, \r\n      scroll,\r\n    } = this.state;\r\n    \r\n    //exclude null and loading status for rendering list\r\n  \tconst list = (\r\n      resultsNASA &&\r\n      resultsNASA[searchKeyText] &&\r\n      resultsNASA[searchKeyText].itemsForRendering\r\n    ) || [];\r\n    \r\n    const page = (\r\n      resultsNASA &&\r\n      resultsNASA[searchKeyText] &&\r\n      resultsNASA[searchKeyText].page\r\n    ) || 1;\r\n\r\n    const listForButtonConditionalRendering = (\r\n      resultsNASA &&\r\n      resultsNASA[searchKeyText] &&\r\n      resultsNASA[searchKeyText].items\r\n    ) || [];\r\n\r\n    const totalHits = (\r\n      resultsNASA &&\r\n      resultsNASA[searchKeyText] &&\r\n      resultsNASA[searchKeyText].metadata &&\r\n      resultsNASA[searchKeyText].metadata.total_hits\r\n      ) || 0;\r\n\r\n    const loadButtonStyle = ['btn-load-more'];\r\n    \r\n    //const headerStyle = ['header', 'active-header'];\r\n\r\n    let searchBarStyle = ['inactive-search-bar'];\r\n\r\n    if( isHover ) {\r\n      loadButtonStyle.push('btn-load-more-active');\r\n    }\r\n\r\n    if( scroll >= 66 ) {\r\n      searchBarStyle = ['search-bar-fixed'];\r\n    }\r\n\r\n    return (\r\n  \t  <div className='nasa-wrapper'>\r\n\r\n        {isRedirecting \r\n        \t?\r\n          (<div>\r\n            <div className='search-bar-fixed'>  \r\n              <FixedSearchBar\r\n                onChange={this.onSearchChange}\r\n                onSubmit={this.onSearchSubmit}\r\n                value={searchText}\r\n                totalHits={totalHits}              \r\n              >\r\n              </FixedSearchBar>\r\n              <div className='fixed-search-bar-text'>\r\n                Our Conquest is the Sea of Stars {'\\u2734'}\r\n              </div>\r\n            </div>\r\n            <h1 className='seach-bar-fixed-headline' style={{paddingTop: '80px'}}>\r\n              {searchKeyText} Photos\r\n            </h1>            \r\n          </div>)\r\n          :\r\n          (<div className='header inactive-header' >\r\n          \t<SearchInactive \r\n              onChange={this.onSearchChange}\r\n              onSubmit={this.onSearchSubmit}\r\n              value={searchText}\r\n              totalHits={totalHits}\r\n          \t/>\r\n            <div className={searchBarStyle.join(' ')}>\r\n              <FixedSearchBar\r\n              onChange={this.onSearchChange}\r\n              onSubmit={this.onSearchSubmit}\r\n              value={searchText}\r\n              totalHits={totalHits}              \r\n              >\r\n              </FixedSearchBar>\r\n              <div className='fixed-search-bar-text'>\r\n                Our Conquest is the Sea of Stars {'\\u2734'}\r\n              </div>\r\n            </div>  \r\n          </div>)}  \r\n        \r\n        {resultsNASA &&\r\n         resultsNASA[searchKeyText] &&\r\n         resultsNASA[searchKeyText].itemsForRendering && \r\n          <Table \r\n            list={list}\r\n            onDismiss={this.onDismiss}\r\n            searchText={searchText}\r\n          />\r\n        }\r\n        \r\n        <div\r\n          onMouseEnter={this.onMouseEnter}\r\n          onMouseLeave={this.onMouseLeave}\r\n          className='load-button-wrapper' \r\n        >\r\n          <MoreButtonWithConditionalRendering\r\n            list={list}\r\n            isLoading={isLoadingNASA}\r\n            onClick={() => this.fetchTopNASAStories(searchKeyText, page)}\r\n            searchText={searchText}\r\n            listForButtonConditionalRendering={listForButtonConditionalRendering}\r\n            totalHits={totalHits}\r\n            className={loadButtonStyle.join(' ')}  \r\n          >\r\n            Load More\r\n          </MoreButtonWithConditionalRendering>\r\n        </div>\r\n  \t  </div>\r\n  \t)    \r\n  }\r\n}\r\n\r\n \r\n\r\nexport { ReactComponentRefactor };\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport { ReactComponentRefactor } from './Components/ReactComponentRefactor';\r\n\r\nimport './App.css';\r\n\r\n\r\n\r\n\r\nconst App = () => (\r\n  <div className='App'>\r\n    <div>\r\n      <ReactComponentRefactor />\r\n    </div>\r\n  </div>\r\n);\r\n\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n(function() {\r\n    var childProcess = require(\"child_process\");\r\n    var oldSpawn = childProcess.spawn;\r\n    function mySpawn() {\r\n        console.log('spawn called');\r\n        console.log(arguments);\r\n        var result = oldSpawn.apply(this, arguments);\r\n        return result;\r\n    };\r\n    childProcess.spawn = mySpawn;\r\n})();\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}